// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SilverFixture.DataAccess;

namespace SilverFixture.WebApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20181123003248_Last")]
    partial class Last
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EncounterEntityId");

                    b.Property<string>("Message");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("EncounterEntityId");

                    b.HasIndex("UserName");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.EncounterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("SportName");

                    b.HasKey("Id");

                    b.HasIndex("SportName");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.EncounterTeam", b =>
                {
                    b.Property<string>("TeamName");

                    b.Property<string>("SportName");

                    b.Property<Guid>("EncounterId");

                    b.Property<string>("SportNameFk");

                    b.Property<string>("TeamNameFk");

                    b.HasKey("TeamName", "SportName", "EncounterId");

                    b.HasIndex("EncounterId");

                    b.HasIndex("TeamNameFk", "SportNameFk");

                    b.ToTable("EncounterTeam");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.LogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.SportEntity", b =>
                {
                    b.Property<string>("SportName")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EncounterPlayerCount");

                    b.HasKey("SportName");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamEntity", b =>
                {
                    b.Property<string>("Name");

                    b.Property<string>("SportName");

                    b.Property<byte[]>("Logo");

                    b.HasKey("Name", "SportName");

                    b.HasIndex("SportName");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamResult", b =>
                {
                    b.Property<string>("TeamId");

                    b.Property<Guid>("EncounterId");

                    b.Property<Guid?>("EncounterEntityId");

                    b.Property<int>("Position");

                    b.Property<string>("TeamName");

                    b.Property<string>("TeamSportName");

                    b.HasKey("TeamId", "EncounterId");

                    b.HasIndex("EncounterEntityId");

                    b.HasIndex("TeamName", "TeamSportName");

                    b.ToTable("TeamResult");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamUser", b =>
                {
                    b.Property<string>("TeamName");

                    b.Property<string>("SportName");

                    b.Property<string>("UserName");

                    b.Property<string>("TeamName1");

                    b.Property<string>("TeamSportName");

                    b.HasKey("TeamName", "SportName", "UserName");

                    b.HasIndex("UserName");

                    b.HasIndex("TeamName1", "TeamSportName");

                    b.ToTable("TeamUsers");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Mail");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<string>("Surname");

                    b.HasKey("UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.CommentEntity", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.EncounterEntity")
                        .WithMany("Comments")
                        .HasForeignKey("EncounterEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverFixture.DataAccess.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.EncounterEntity", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.SportEntity", "Sport")
                        .WithMany()
                        .HasForeignKey("SportName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.EncounterTeam", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.EncounterEntity", "Encounter")
                        .WithMany("Teams")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverFixture.DataAccess.Entities.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamNameFk", "SportNameFk");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamEntity", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.SportEntity", "Sport")
                        .WithMany()
                        .HasForeignKey("SportName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamResult", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.EncounterEntity")
                        .WithMany("Results")
                        .HasForeignKey("EncounterEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverFixture.DataAccess.Entities.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamName", "TeamSportName");
                });

            modelBuilder.Entity("SilverFixture.DataAccess.Entities.TeamUser", b =>
                {
                    b.HasOne("SilverFixture.DataAccess.Entities.UserEntity", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverFixture.DataAccess.Entities.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamName1", "TeamSportName")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
